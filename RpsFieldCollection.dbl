;******************************************************************************
;
; Class:		SynPsg.Rps.RpsFieldCollection
;
; Description:	Represents a collection of fields for a Repository structure
;
; Author:		Steve Ives, Synergex Professional Services Group
;
; Date: 		19th October 2007
;
;******************************************************************************
;
; This code is supplied as seen and without warranty or support, and is used
; at your own risk. Neither the author or Synergex accept any responsability
; for any loss or damage which may result from the use of this code.
;
;******************************************************************************
;
; $Revision: 1 $
;
; $Date: 2010-04-13 17:06:56-07:00 $
;
;******************************************************************************
;
.define DDINFO_DEFINES_ONLY
.include "RPSLIB:ddinfo.def"
.undefine DDINFO_DEFINES_ONLY

import SynPsg.Rps
.ifdef DBLV915
import Synergex.SynergyDE.Collections
.else
import System.Collections
.endc

namespace SynPsg.Rps

	public class RpsFieldCollection
		
		private p_Collection, @ArrayList

		; Constructor (don't load any fields, default capacity)
		public method RpsFieldCollection
			endparams
		proc
			p_Collection = new ArrayList()
		endmethod

		; Constructor (don't load any fields, specific capacity)
		public method RpsFieldCollection
			required in Capacity, int
			endparams
		proc
			p_Collection = new ArrayList(Capacity)
		endmethod

		; Constructor (default capacity)
		public method RpsFieldCollection
			required in StructureName, a
			endparams
		proc
			p_Collection = new ArrayList()
			Repository.CheckIsOpen()
			LoadFields(StructureName)
		endmethod
		
		; Constructor (specified capacity)
		public method RpsFieldCollection
			required in StructureName, a
			required in Capacity, int
			endparams
		proc
			p_Collection = new ArrayList(Capacity)
			Repository.CheckIsOpen()
			LoadFields(StructureName)
		endmethod
		
		
		
		; Destructor
		method ~RpsFieldCollection
		proc
			clear p_Collection
		endmethod

		; Load structure fields
		private method LoadFields, void
			required in StructureName, a
			endparams
			record local_data
				MemHandle, int
				ix, int
			endrecord
		proc
			init local_data
			try 
			begin
				data p_s_info, s_info
				;Set the current structure and get structure information
				dd_struct(Repository.RpsControl,DDS_INFO,StructureName,p_s_info)
				if (Repository.RpsControl.error)
					throw new RpsFieldException("Failed to get information for repository structure "+StructureName)
				;Do we have any fields to load?
				if (p_s_info.si_childct) 
				begin
					;Size the field names array and get field names
					MemHandle = %mem_proc(DM_ALLOC,^size(strIdentifier)*p_s_info.si_childct)
					dd_field(Repository.RpsControl,DDF_SLIST,p_s_info.si_childct,^m(strIdentifier[1],MemHandle))
					if (Repository.RpsControl.error)
						throw new RpsFieldException("Failed to get field names for repository structure "+StructureName)
					;Add fields to the collection
					for ix from 1 thru p_s_info.si_childct
						p_Collection.Add(new RpsField(StructureName,^m(strIdentifier[ix],MemHandle)))
				end
			end
			finally
			begin
				;Free field names array
				if (MemHandle)
                    MemHandle = %mem_proc(DM_FREE,MemHandle)
			end
			endtry
		endmethod
		
		; Remove overlay fields from the collection
		public method RemoveOverlays, void
			record 
				index, int
				field, @RpsField
			endrecord
		proc
			index=1
			repeat
			begin
				if (index<=(p_Collection.Count)) then
				begin
					field=(RpsField)p_Collection[index]
					if (field.OverlaysField) then
						p_Collection.RemoveAt(index)
					else
						index+=1
				end
				else
					exitloop
			end
		endmethod

		; Remove fields marked as "Excluded by Language" from the collection
		public method RemoveExcludedByLanguage, void
			record 
				index, int
				field, @RpsField
			endrecord
		proc
			index=1
			repeat
			begin
				if (index<=(p_Collection.Count)) then
				begin
					field=(RpsField)p_Collection[index]
					if (field.ExcludedByLanguage) then
						p_Collection.RemoveAt(index)
					else
						index+=1
				end
				else
					exitloop
			end
		endmethod

		; Remove fields marked as "Excluded by Toolkit" from the collection
		public method RemoveExcludedByToolkit, void
			record 
				index, int
				field, @RpsField
			endrecord
		proc
			index=1
			repeat
			begin
				if (index<=(p_Collection.Count)) then
				begin
					field=(RpsField)p_Collection[index]
					if (field.ExcludedByToolkit) then
						p_Collection.RemoveAt(index)
					else
						index+=1
				end
				else
					exitloop
			end
		endmethod

		; Remove fields marked as "Excluded by ReportWriter" from the collection
		public method RemoveExcludedByReportWriter, void
			record 
				index, int
				field, @RpsField
			endrecord
		proc
			index=1
			repeat
			begin
				if (index<=(p_Collection.Count)) then
				begin
					field=(RpsField)p_Collection[index]
					if (field.ExcludedByReportWriter) then
						p_Collection.RemoveAt(index)
					else
						index+=1
				end
				else
					exitloop
			end
		endmethod

		; Remove fields marked as "Excluded by Web" from the collection
		public method RemoveExcludedByWeb, void
			record 
				index, int
				field, @RpsField
			endrecord
		proc
			index=1
			repeat
			begin
				if (index<=(p_Collection.Count)) then
				begin
					field=(RpsField)p_Collection[index]
					if (field.ExcludedByWeb) then
						p_Collection.RemoveAt(index)
					else
						index+=1
				end
				else
					exitloop
			end
		endmethod

		;-----------------------------------------------------------------------
		;The follwoing members make the collection look just like an ArrayList
		
		;Gets or sets the number of elements that the collection can contain.
		public property Capacity, int
			method get
			proc
				mreturn p_Collection.Capacity
			endmethod
			method set
			proc
				p_Collection.Capacity = value
			endmethod
		endproperty

		;Gets the number of elements actually contained in the collection.
		public property Count, int
			method get
			proc
				mreturn p_Collection.Count
			endmethod
		endproperty

		;Gets or sets the element at the specified index.
		public property Indexer, @RpsField
			required in Index, int
			method get
			proc
				mreturn (RpsField)p_Collection[Index]
			endmethod
			method set
			proc
				p_Collection[Index] = value
			endmethod
		endproperty

		;Gets or sets the element at the specified index.
		public property Indexer, @RpsField
			required in FieldName, a
			method get
				record 
					Index	,int
					Found	,boolean
				endrecord
			proc
				Found = false
				for Index from 1 thru p_Collection.Count
				begin
					if (((RpsField)p_Collection[Index]).Name==FieldName)
					begin
						Found = true
						exitloop
					end
				end
				if (Found) then 
					mreturn (RpsField)p_Collection[Index]
				else
					mreturn ^null
			endmethod
		endproperty

		;Adds an element to the end of the collection. 
		public method Add, int
			required in RpsField, @RpsField
			endparams
		proc
			mreturn p_Collection.Add(RpsField)
		endmethod

		;Removes the element at the specified index of the collection.
		public method RemoveAt, void
			required in Index, int
		proc
			p_Collection.RemoveAt(Index)
		endmethod

		;Searches for the specified element and returns the one-based index
		;of the first occurrence within the entire collection.
		public method IndexOf, int
			required in RpsField, @RpsField
		proc
			mreturn p_Collection.IndexOf(RpsField)
		endmethod

		;Searches for the specified element and returns the one-based index
		;of the first occurrence within the range of elements in the collection
		;that extends from the specified index to the last element.
		public method IndexOf, int
			required in RpsField, @RpsField
			required in StartIndex, int
		proc
			mreturn p_Collection.IndexOf(RpsField,StartIndex)
		endmethod

		;Searches for the specified element and returns the one-based index
		;of the first occurrence within the range of elements in the collection
		;that starts at the specified index and contains the specified number of
		;elements. 
		public method IndexOf, int
			required in RpsField, @RpsField
			required in StartIndex, int
			required in Count, int
		proc
			mreturn p_Collection.IndexOf(RpsField,StartIndex,Count)
		endmethod

		;Removes all elements from the collection.
		public method Clear, void
		proc
			p_Collection.Clear()
		endmethod

		;Inserts an element into the collection at the specified index.
		public method Insert, void
			required in AtIndex, int
			required in RpsField, @RpsField
			endparams
		proc
			p_Collection.Insert(AtIndex,RpsField)
		endmethod

		;Searches for the specified object and returns the one-based index of
		;the last occurrence within the entire collection. 
		public method LastIndexOf, int
			required in RpsField, @RpsField
		proc
			mreturn p_Collection.LastIndexOf(RpsField)
		endmethod

		;Searches for the specified object and returns the one-based index of
		;the last occurrence within the range of elements in the collection that
		;extends from the first element to the specified index.
		public method LastIndexOf, int
			required in RpsField, @RpsField
			required in StartIndex, int
		proc
			mreturn p_Collection.LastIndexOf(RpsField,StartIndex)
		endmethod

		;Searches for the specified object and returns the one-based index of
		;the last occurrence within the range of elements in the collection that
		;contains the specified number of elements and ends at the specified index. 
		public method LastIndexOf, int
			required in RpsField, @RpsField
			required in StartIndex, int
			required in Count, int
		proc
			mreturn p_Collection.LastIndexOf(RpsField,StartIndex,Count)
		endmethod

	endclass

endnamespace
