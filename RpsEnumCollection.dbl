;;*****************************************************************************
;;
;; Class:		SynPsg.Rps.RpsEnumCollection
;;
;; Description:	Represents a collection of repository enumeration definitions
;;
;; Author:		Steve Ives, Synergex Professional Services Group
;;
;; Date: 	    2nd November 2009
;;
;;*****************************************************************************
;;
;; This code is supplied as seen and without warranty or support, and is used
;; at your own risk. Neither the author or Synergex accept any responsability
;; for any loss or damage which may result from the use of this code.
;;
;;*****************************************************************************
;;
;; $Revision: 1 $
;;
;; $Date: 2010-04-13 17:06:56-07:00 $
;;
;;*****************************************************************************
;
.define DDINFO_DEFINES_ONLY
.include "RPSLIB:ddinfo.def"
.undefine DDINFO_DEFINES_ONLY

import SynPsg.Rps
.ifdef DBLV915
import Synergex.SynergyDE.Collections
.else
import System.Collections
.endc

namespace SynPsg.Rps

	public class RpsEnumCollection
		
		private p_Collection, @ArrayList

		;; Destructor
		method ~RpsEnumCollection
		proc
			clear p_Collection
		endmethod

		.ifdef DBLV93

		;; Constructor (all enumerations)
		public method RpsEnumCollection
			endparams
		proc
			p_Collection = new ArrayList()
			Repository.CheckIsOpen()
			LoadAllEnumerations()
		endmethod
		
		;; Constructor (enumerations used by a structures fields)
		public method RpsEnumCollection
			required in StructureName, a
			endparams
		proc
			p_Collection = new ArrayList()
			Repository.CheckIsOpen()
			LoadStructureEnumerations(StructureName)
		endmethod

		;;---------------------------------------------------------------------
		;; Private methods and properties

		;; Load all enumerations
		private method LoadAllEnumerations, void
			endparams
			record local_data
				MemHandle, int
				EnumCount, int
				ix, int
			endrecord
		proc
			init local_data
			try 
			begin
				;Get the number of enumerations in the repository
				dd_name(Repository.RpsControl,DDN_COUNT,DDN_ENUM,EnumCount)
				if (Repository.RpsControl.error)
					throw new RpsEnumException("Failed to get repository enumeration count")
				;Do we have any enumerations to load?
				if (EnumCount) 
				begin
					;Allocate enumeration name memory and get enum names
					MemHandle = %mem_proc(DM_ALLOC,^size(strIdentifier)*EnumCount)
					dd_name(Repository.RpsControl,DDN_LIST,DDN_ENUM,EnumCount,^m(strIdentifier[1],MemHandle))
					if (Repository.RpsControl.error)
						throw new RpsEnumException("Failed to get repository enumeration names")
					for ix from 1 thru EnumCount
						p_Collection.Add(new RpsEnum(^m(strIdentifier[ix],MemHandle)))
				end
			end
			finally
			begin
				;;Free enumeration names array
				if (MemHandle) 
                    MemHandle = %mem_proc(DM_FREE,MemHandle)
			end
			endtry
		endmethod

		;; Load all enumerations
		private method LoadStructureEnumerations, void
			required in StructureName, a
			endparams
			record 
				str, @RpsStructure
				ix, int
			endrecord
		proc
			str = new RpsStructure(StructureName)
			for ix from 1 thru str.Fields.Count
			begin
				if (str.Fields[ix].EnumName)
				begin
					data enm, @RpsEnum
					data done, boolean, false
					;;Look for the enum in our existing collection
					foreach enm in p_Collection
					begin
						if (enm.Name==str.Fields[ix].EnumName)
						begin
							done = true
							exitloop
						end
					end
					;;Skip it if we already have it
					if (done)
						nextloop
					;;Add to collection
					p_Collection.Add(new RpsEnum(str.Fields[ix].EnumName))
				end
			end
			str = ^null
		endmethod

		;;---------------------------------------------------------------------
		;;The follwoing members make the collection look just like an ArrayList
		
		;;Gets or sets the number of elements that the collection can contain.
		public property Capacity, int
			method get
			proc
				mreturn p_Collection.Capacity
			endmethod
			method set
			proc
				p_Collection.Capacity = value
			endmethod
		endproperty

		;;Gets the number of elements actually contained in the collection.
		public property Count, int
			method get
			proc
				mreturn p_Collection.Count
			endmethod
		endproperty

		;;Gets or sets the element at the specified index.
		public property Indexer, @RpsEnum
			required in Index, int
			method get
			proc
				mreturn (RpsEnum)p_Collection[Index]
			endmethod
			method set
			proc
				p_Collection[Index] = value
			endmethod
		endproperty

		;;Adds an element to the end of the collection. 
		public method Add, int
			required in RpsEnum, @RpsEnum
			endparams
		proc
			mreturn p_Collection.Add(RpsEnum)
		endmethod

		;;Removes the element at the specified index of the collection.
		public method RemoveAt, void
			required in Index, int
		proc
			p_Collection.RemoveAt(Index)
		endmethod

		;;Searches for the specified element and returns the one-based index
		;;of the first occurrence within the entire collection.
		public method IndexOf, int
			required in RpsEnum, @RpsEnum
		proc
			mreturn p_Collection.IndexOf(RpsEnum)
		endmethod

		;;Searches for the specified element and returns the one-based index
		;;of the first occurrence within the range of elements in the
		;;collection that extends from the specified index to the last element.
		public method IndexOf, int
			required in RpsEnum, @RpsEnum
			required in StartIndex, int
		proc
			mreturn p_Collection.IndexOf(RpsEnum,StartIndex)
		endmethod

		;;Searches for the specified element and returns the one-based index
		;;of the first occurrence within the range of elements in the
		;;collection that starts at the specified index and contains the
		;;specified number of elements. 
		public method IndexOf, int
			required in RpsEnum, @RpsEnum
			required in StartIndex, int
			required in Count, int
		proc
			mreturn p_Collection.IndexOf(RpsEnum,StartIndex,Count)
		endmethod

		;;Removes all elements from the collection.
		public method Clear, void
		proc
			p_Collection.Clear()
		endmethod

		;;Inserts an element into the collection at the specified index.
		public method Insert, void
			required in AtIndex, int
			required in RpsEnum, @RpsEnum
			endparams
		proc
			p_Collection.Insert(AtIndex,RpsEnum)
		endmethod

		;;Searches for the specified object and returns the one-based index of
		;;the last occurrence within the entire collection. 
		public method LastIndexOf, int
			required in RpsEnum, @RpsEnum
		proc
			mreturn p_Collection.LastIndexOf(RpsEnum)
		endmethod

		;;Searches for the specified object and returns the one-based index of
		;;the last occurrence within the range of elements in the collection
		;;that extends from the first element to the specified index.
		public method LastIndexOf, int
			required in RpsEnum, @RpsEnum
			required in StartIndex, int
		proc
			mreturn p_Collection.LastIndexOf(RpsEnum,StartIndex)
		endmethod

		;;Searches for the specified object and returns the one-based index of
		;;the last occurrence within the range of elements in the collection
		;;that contains the specified number of elements and ends at the
		;;specified index. 
		public method LastIndexOf, int
			required in RpsEnum, @RpsEnum
			required in StartIndex, int
			required in Count, int
		proc
			mreturn p_Collection.LastIndexOf(RpsEnum,StartIndex,Count)
		endmethod

		.endc

	endclass

endnamespace
