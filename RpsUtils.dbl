;******************************************************************************
;
; Class:		SynPsg.Rps.RpsUtils
;
; Description:	Utilities and structures for the Synergy/DE Repository classes
;
; Author:		Steve Ives, Synergex Professional Services Group
;
; Date: 		19th October 2007
;
;******************************************************************************
;
; This code is supplied as seen and without warranty or support, and is used
; at your own risk. Neither the author or Synergex accept any responsability
; for any loss or damage which may result from the use of this code.
;
;******************************************************************************
;
; $Revision: 1 $
;
; $Date: 2010-04-13 17:06:56-07:00 $
;
;******************************************************************************
;
import SynPsg.Rps

namespace SynPsg.Rps

	public class RpsUtils
		
		;----------------------------------------------------------------------
		;Convert an alpha string to lowercase
		;
		public static method LowerCase, a
			required in InText, a
			endparams
			record 
				MemHandle, int
			endrecord
		proc
			MemHandle = %mem_proc(DM_ALLOC,%trim(InText))
			^m(MemHandle) = InText
			locase ^m(MemHandle)
			mreturn ^m(MemHandle)
		endmethod
		
		;----------------------------------------------------------------------
		;Convert an alpha string to UPPERCASE
		;
		public static method UpperCase, a
			required in InText, a
			endparams
			record 
				MemHandle, int
			endrecord
		proc
			MemHandle = %mem_proc(DM_ALLOC,%trim(InText))
			^m(MemHandle) = InText
			upcase ^m(MemHandle)
			mreturn ^m(MemHandle)
		endmethod

		;----------------------------------------------------------------------
		;Convert an alpha string to Mixed_Case
		;
		public static method MixedCase, a
			required in InText, a
			endparams
			record local_data
				Position, int
				Length, int
				MemHandle, int
			endrecord
			structure chr
						,a1
			endstructure
		proc
			MemHandle = %mem_proc(DM_ALLOC,%trim(InText))
			^m(MemHandle) = InText

			if (Length=%trimz(^m(MemHandle)))
			begin
				locase ^m(MemHandle)
				upcase ^m(chr(1:1),MemHandle)

				Position=1
				repeat
				begin
					Position=%instr(Position,^m(MemHandle),"_")
					if (Position) && (Position<Length) then
						upcase ^m(chr(Position+=1:1),MemHandle)
					else
						exitloop
				end

				Position=1
				repeat
				begin
					Position=%instr(Position,^m(MemHandle),".")
					if (Position) && (Position<Length) then
						upcase ^m(chr(Position+=1:1),MemHandle)
					else
						exitloop
				end

			end
			
			mreturn ^m(MemHandle)

		endmethod
		
		;-----------------------------------------------------------------------
		;Determine if a string contains a numeric value
		;
		public static method IsNumeric ,int
			required in a_string, a
			endparams
			stack record
				numeric     ,i4
				d18         ,d18
			endrecord
		proc

			try 
			begin
				d18 = atrim(a_string)
				numeric = 1
			end
			catch (ex)
				clear numeric
			endtry

			mreturn numeric

		endmethod
		
		;-----------------------------------------------------------------------
		;Remove leading spaces from a string
		;
		public static method RemoveLeading, a
			required in a_string, a
			endparams
			stack record
				pos, int
			endrecord
		proc

			if (!a_string) then
				mreturn ""
			else
			begin
				clear pos
				repeat
				begin
					 if (a_string(pos+=1:1))
						 exitloop
				end
				mreturn a_string(pos,trim(a_string))
			end

		endmethod

	endclass
	
	structure strIdentifier
						,a30
	endstructure
	
	.define DDINFO_STRUCTURE
	.include "RPSLIB:ddinfo.def"
	.undefine DDINFO_STRUCTURE
	
	public enum RpsColorPalette
		Palette1, 1
		Palette2, 2
		Palette3, 3
		Palette4, 4
		Palette5, 5
		Palette6, 6
		Palette7, 7
		Palette8, 8
		Palette9, 9
		Palette10, 10
		Palette11, 11
		Palette12, 12
		Palette13, 13
		Palette14, 14
		Palette15, 15
		Palette16, 16
	endenum
	
	public enum RpsFieldBreak
		None, 0
		Break, 1
		Always, 2
		OnReturn, 3
	endenum
		
	public enum RpsFieldCorecedType
		;;For decimal and integer fields / templates
		CtNone,          0
		CtByte,          1
		CtShort,         2
		CtInt,           3
		CtLong,          4
		CtSbyte,         5
		CtUshort,        6
		CtUint,          7
		CtUlong,         8
		CtBoolean,       9
		;;For implied decimal fields / templates
		CtDouble,       10		;;Actual RPS value is 1
		CtFloat,        11		;;Actual RPS value is 2
		;;For date and time fields / templates
		CtNullDateTime, 12 		;;Actual RPS value is 1
	endenum
	
	public enum RpsFieldDataType
		Alpha, 1
		Decimal, 2
		Integer, 3
		User, 4
	endenum
	
	public enum RpsFieldDefaultAction
		None, 0
		Default, 1
		Copy, 2
		Increment, 3
		Decrement, 4
	endenum
	
	public enum RpsFieldGroup
        No, 0
        Yes, 1
        Overlay, 2
	endenum
	
	public enum RpsFieldNegatives
		None ,0
		Allowed ,1
		Only, 2
		OrZero, 3
	endenum
	
	public enum RpsFieldSelectionType
		Window, 1
		List, 2
	endenum
	
	public enum RpsFieldTimeout
		None, 0
		Time, 1
		Immediate, 2
		Global, 3
		Forever, 4
	endenum
	
	public enum RpsFormatType
		Alpha, 1
		Numeric, 2
	endenum
	
	public enum RpsKeyDuplicates
		NoDuplicates, 0
		Duplicates, 1
	endenum
	
	public enum RpsKeyInsertDups
		AtFront, 0
		AtEnd, 1
	endenum
	
	public enum RpsKeyNullType
		None, 0
		Replicating, 1
		NonReplicating, 2
		Short, 3
	endenum
	
	public enum RpsKeyOrder
		Ascending, 0
		Descending, 1
	endenum
	
	public enum RpsKeySegmentDataType
		Alpha, 1
		NoCaseAlpha, 2
		Decimal, 3
		SignedInteger, 4
		UnsignedInteger, 5
	endenum
	
	public enum RpsKeySegmentOrder
		Ascending, 1
		Descending, 2
	endenum
	
	public enum RpsKeyType
		Foreign, 0
		Access, 1
	endenum
	
	public enum RpsKeySegmentType
		Field, 1
		Literal, 2
		External, 3
		RecordNumber, 4
	endenum
	
	public enum RpsPositionMode
		Absolute, 1
		Relative, 2
	endenum
	
	public enum RpsFieldSubclass
		None, 0
		DateYYMMDD, 1
		DateYYYYMMDD, 2
		DateYYJJJ, 3
		DateYYYYJJJ, 4
		DateYYPP, 5
		DateYYYYPP, 6
		TimeHHMMSS, 7
		TimeHHMM, 8
		Binary, 9
		UserAlpha, 10
		UserNumeric, 11
		UserDate, 12
	endenum
	
	public enum RpsFieldViewAs
		Field, 0
		RadioButtons, 2
		CheckBox ,3
	endenum
	
	public enum RpsFilePageSize
		PageSize1024, 0
		PageSize512, 1
		PageSize2048, 2
		PageSize4096, 3
		PageSize8192, 4
	endenum
	
	public enum RpsFileAddressing
		Addressing32Bit, 0
		Addressing40Bit, 1
	endenum
	
	public enum RpsGlobalFormatType
		Format, 4
		DateFormat, 5
		TimeFormat, 6
	endenum
	
	public enum RpsJustification
		Left, 0
		Right, 1
		Center, 2
	endenum
	
	public enum RpsRecordType
		FixedLength, 0
		VariableLength, 1
		MultipleFixedLength, 2
	endenum
	
	public enum RpsTagComparison
		CompareAnd, 1
		CompareOr, 2
	endenum
	
	public enum RpsTagOperator
		OpEQ, 1
		OpNE, 2
		OpLE, 3
		OpLT, 4
		OpGE, 5
		OpGT, 6
	endenum
	
	public enum RpsTagType
		None, 0
		FieldAndValue, 1
		RecordSize, 2
	endenum
	
	;Used to determine if a new object should automatically load
	;it's content.  For example, if an RpsStructureCollection is passed Load
	;then it will load all repository structures into the collection. If passed
	;NoLoad then it will not initially load any structures.
	public enum RpsLoadMode
		NoLoad	,0
		Load	,1
	endenum
	
endnamespace

