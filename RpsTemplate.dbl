;******************************************************************************
;
; Class:        SynPsg.Rps.RpsTemplate
;
; Description:  Represents a single Repository template definition
;
; Author:       Steve Ives, Synergex Professional Services Group
;
; Date:         19th October 2007
;
;******************************************************************************
;
; This code is supplied as seen and without warranty or support, and is used
; at your own risk. Neither the author or Synergex accept any responsability
; for any loss or damage which may result from the use of this code.
;
;******************************************************************************
;
; $Revision: 1 $
;
; $Date: 2010-04-13 17:06:56-07:00 $
;
;******************************************************************************
;
.define DDINFO_DEFINES_ONLY
.include "RPSLIB:ddinfo.def"
.undefine DDINFO_DEFINES_ONLY

import SynPsg.Rps
.ifdef DBLV915
import Synergex.SynergyDE.Collections
.else
import System.Collections
.endc

namespace SynPsg.Rps

    public class RpsTemplate
        
        ;Template attribute data
        protected p_t_info              ,t_info
        protected p_TemplateName        ,a30
        protected p_Description         ,a40
        protected p_LongDescription     ,a1800
        protected p_UserFieldType       ,a30
        protected p_ReportHeading       ,a40
        protected p_Prompt              ,a80
        protected p_HelpIdentifier      ,a80
        protected p_InfoLineText        ,a80
        protected p_UserText            ,a80
        protected p_AlternateName       ,a30
        protected p_FieldFont           ,a30
        protected p_PromptFont          ,a30
        protected p_DefaultValue        ,a80
        protected p_ArriveMethod        ,a30
        protected p_LeaveMethod         ,a30
        protected p_DrillMethod         ,a30
        protected p_HyperlinkMethod     ,a30
        protected p_ChangeMethod        ,a30
        protected p_DisplayMethod       ,a30
        protected p_EditFormatMethod    ,a30
        protected p_ArrayDimension      ,[#]int
        protected p_fti_range           ,fti_range
        protected p_fti_enum            ,fti_enum
        protected p_AllowList           ,@ArrayList
        protected p_SelectionList       ,@ArrayList
		protected p_CorecedType			,RpsFieldCorecedType

        ; Constructor
        public method RpsTemplate
            required in TemplateName, a
            endparams
        proc
            Repository.CheckIsOpen()
            LoadTemplate(TemplateName)
        endmethod
        
        ; Destructor
        method ~RpsTemplate
        proc
            clear p_AllowList, p_SelectionList
        endmethod
        
        ;Load the data for this template
        private method LoadTemplate, void
            required in TemplateName, a
            endparams
        proc
            ;Save the template name
            p_TemplateName = RpsUtils.UpperCase(TemplateName)
            
            ;Load the template information structure
            dd_template(Repository.RpsControl,DDT_INFO,TemplateName,p_t_info)
            if (Repository.RpsControl.error)
                throw new RpsTemplateException("Failed to get information for repository template "+TemplateName)

            ;Load extended data
            
            ;Load description (a40)
            if (p_t_info.ti_desc)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_desc,p_Description)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get description for repository template "+TemplateName)
            end
            
            ;Load long description (a1800)
            if (p_t_info.ti_ldesc)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_ldesc,p_LongDescription)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get long description for repository template "+TemplateName)
            end
            
            ;Load user defined field type (a30)
            if (p_t_info.ti_usrtyp)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_usrtyp,p_UserFieldType)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get user defined type for repository template "+TemplateName)
            end
            
            ;Load report heading (a40)
            if (p_t_info.ti_heading)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_heading,p_ReportHeading)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get report heading for repository template "+TemplateName)
            end
            
            ;Load prompt (a80)
            if (p_t_info.ti_prompt)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_prompt,p_Prompt)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get prompt for repository template "+TemplateName)
            end
            
            ;Load help identifier (a80)
            if (p_t_info.ti_help)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_help,p_HelpIdentifier)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get help identifier for repository template "+TemplateName)
            end
            
            ;Load information line text (a80)
            if (p_t_info.ti_infoln)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_infoln,p_InfoLineText)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get information line text for repository template "+TemplateName)
            end
            
            ;Load user text string (a80)
            if (p_t_info.ti_utext)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_utext,p_UserText)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get user text for repository template "+TemplateName)
            end
            
            ;Load alternate name (a30)
            if (p_t_info.ti_altnm)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_altnm,p_AlternateName)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get alternate name for repository template "+TemplateName)
            end
            
            ;Load field font (a30)
            if (p_t_info.ti_font)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_font,p_FieldFont)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get field font for repository template "+TemplateName)
            end
            
            ;Load prompt font (a30)
            if (p_t_info.ti_prmptfont)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_prmptfont,p_PromptFont)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get prompt font for repository template "+TemplateName)
            end
            
            ;Load default value (a80)
            if (p_t_info.ti_def)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_def,p_DefaultValue)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get default value for repository template "+TemplateName)
            end
            
            ;Load arrive method (a30)
            if (p_t_info.ti_arrivemeth)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_arrivemeth,p_ArriveMethod)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get arrive method for repository template "+TemplateName)
            end
            
            ;Load leave method (a30)
            if (p_t_info.ti_leavemeth)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_leavemeth,p_LeaveMethod)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get leave method for repository template "+TemplateName)
            end
            
            ;Load drill method (a30)
            if (p_t_info.ti_drillmeth)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_drillmeth,p_DrillMethod)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get drill method for repository template "+TemplateName)
            end
            
            ;Load hyperlink method (a30)
            if (p_t_info.ti_hypermeth)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_hypermeth,p_HyperlinkMethod)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get hyperlink method for repository template "+TemplateName)
            end
            
            ;Load change method (a30)
            if (p_t_info.ti_changemeth)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_changemeth,p_ChangeMethod)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get change method for repository template "+TemplateName)
            end
            
            ;Load display format method (a30)
            if (p_t_info.ti_dispmeth)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_dispmeth,p_DisplayMethod)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get display method for repository template "+TemplateName)
            end
            
            ;Load edit format method (a30)
            if (p_t_info.ti_editfmtmeth)
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_editfmtmeth,p_EditFormatMethod)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get edit format method for repository template "+TemplateName)
            end

            ;Allowed values (@ArrayList)
            p_AllowList = new ArrayList()
            if (p_t_info.ti_alwlst&&p_t_info.ti_alwct)
            begin
                data ListData, fti_entlst
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_alwlst,ListData)
                if (Repository.RpsControl.error) then
                    throw new RpsTemplateException("Failed to get allow list entries for repository template "+TemplateName)
                else
                begin
                    data idx, int
                    for idx from 1 thru p_t_info.ti_alwct
                        p_AllowList.Add((@a)ListData.fti_entlstary[idx])
                end
            end

            ;Valid selections (@ArrayList)
            p_SelectionList = new ArrayList()
            if (p_t_info.ti_sellist&&p_t_info.ti_selct)
            begin
                data ListData, fti_entlst
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_sellist,ListData)
                if (Repository.RpsControl.error) then
                    throw new RpsTemplateException("Failed to get selection list entries for repository template "+TemplateName)
                else
                begin
                    data idx, int
                    for idx from 1 thru p_t_info.ti_selct
                        p_SelectionList.Add((@a)ListData.fti_entlstary[idx])
                end
            end

            ;Load numeric range values (fti_range)
            if (p_t_info.ti_range) 
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_range,p_fti_range)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get ranges for repository template "+TemplateName)
            end

            ;Load enumeration data (fti_enum)
            if (p_t_info.ti_enum) 
            begin
                dd_template(Repository.RpsControl,DDT_TEXT,p_t_info.ti_enum,p_fti_enum)
                if (Repository.RpsControl.error)
                    throw new RpsTemplateException("Failed to get emumeration data for repository template "+TemplateName)
            end

			;Load the fields coerced type
			using p_t_info.ti_type select
			(T_DEC),
			begin
				using p_t_info.ti_class select
				(C_YYMMDD,C_YYYYMMDD,C_YYJJJ,C_YYYYJJJ,C_YYPP,C_YYYYPP,C_HHMMSS,C_HHMM),
				begin
					using p_t_info.ti_coertype select
					(CT_DATETIME),
						p_CorecedType = RpsFieldCorecedType.CtNone
					(CT_NULLDATETIME),
						p_CorecedType = RpsFieldCorecedType.CtNullDateTime
					endusing
				end
				(),
				begin
					if (p_t_info.ti_prec) then 
					begin
						using p_t_info.ti_coertype select
						(CT_DECIMAL),
							p_CorecedType = RpsFieldCorecedType.CtNone
						(CT_DOUBLE),
							p_CorecedType = RpsFieldCorecedType.CtDouble
						(CT_FLOAT),
							p_CorecedType = RpsFieldCorecedType.CtFloat
						endusing
					end
					else
					begin
						using p_t_info.ti_coertype select
						(CT_DEFAULT),
							p_CorecedType = RpsFieldCorecedType.CtNone
						(CT_BYTE),
							p_CorecedType = RpsFieldCorecedType.CtByte
						(CT_SHORT),
							p_CorecedType = RpsFieldCorecedType.CtShort
						(CT_INT),
							p_CorecedType = RpsFieldCorecedType.CtInt
						(CT_LONG),
							p_CorecedType = RpsFieldCorecedType.CtLong
						(CT_SBYTE),
							p_CorecedType = RpsFieldCorecedType.CtSbyte
						(CT_USHORT),
							p_CorecedType = RpsFieldCorecedType.CtUshort
						(CT_UINT),
							p_CorecedType = RpsFieldCorecedType.CtUint
						(CT_ULONG),
							p_CorecedType = RpsFieldCorecedType.CtUlong
						(CT_BOOLEAN),
							p_CorecedType = RpsFieldCorecedType.CtBoolean
						endusing
					end
				end
				endusing
			end
			(T_INT),
			begin
				using p_t_info.ti_coertype select
				(CT_DEFAULT),
					p_CorecedType = RpsFieldCorecedType.CtNone
				(CT_BYTE),
					p_CorecedType = RpsFieldCorecedType.CtByte
				(CT_SHORT),
					p_CorecedType = RpsFieldCorecedType.CtShort
				(CT_INT),
					p_CorecedType = RpsFieldCorecedType.CtInt
				(CT_LONG),
					p_CorecedType = RpsFieldCorecedType.CtLong
				(CT_SBYTE),
					p_CorecedType = RpsFieldCorecedType.CtSbyte
				(CT_USHORT),
					p_CorecedType = RpsFieldCorecedType.CtUshort
				(CT_UINT),
					p_CorecedType = RpsFieldCorecedType.CtUint
				(CT_ULONG),
					p_CorecedType = RpsFieldCorecedType.CtUlong
				(CT_BOOLEAN),
					p_CorecedType = RpsFieldCorecedType.CtBoolean
				endusing
			end
			(),
				p_CorecedType = RpsFieldCorecedType.CtNone
			endusing

        endmethod
        
        ;----------------------------------------------------------------------
        ;Public properties to expose template attributes
        
        ; Template name (a30)
        public property Name, a
            method get
            proc
                mreturn %atrim(p_TemplateName)
            endmethod
        endproperty
        
        ; Parent template (a30)
        public property ParentTemplate, a
            method get
            proc
                mreturn %atrim(p_t_info.ti_template)
            endmethod
        endproperty
        
        ; Description (a40)
        public property Description, a
            method get
            proc
                mreturn %atrim(p_Description)
            endmethod
        endproperty
        
        ; Long description (a1800)
        public property LongDescription, a
            method get
            proc
                mreturn %atrim(p_LongDescription)
            endmethod
        endproperty

        ; Data type (enum RpsFieldDataType)
        ;   RpsDataType.Alpha   , 1
        ;   RpsDataType.Decimal , 2
        ;   RpsDataType.Integer , 3
        ;   RpsDataType.User    , 4
        public property DataType, RpsFieldDataType
            method get
                record 
                    retval, RpsFieldDataType
                endrecord
            proc
                using p_t_info.ti_type select
                ("A"), retval = RpsFieldDataType.Alpha
                ("D"), retval = RpsFieldDataType.Decimal
                ("I"), retval = RpsFieldDataType.Integer
                ("U"), retval = RpsFieldDataType.User
                endusing
                mreturn retval
            endmethod
        endproperty

        ; Data type code (a1)
        ;   "A", "D", "I" or "U"
        public property DataTypeCode, a1
            method get
            proc
                mreturn p_t_info.ti_type
            endmethod
        endproperty

        ; DBL type subclass (enum RpsFieldSubclass)
        ;   RpsFieldSubclass.DateYYMMDD     ,1
        ;   RpsFieldSubclass.DateYYYYMMDD   ,2
        ;   RpsFieldSubclass.DateYYJJJ      ,3
        ;   RpsFieldSubclass.DateYYYYJJJ    ,4
        ;   RpsFieldSubclass.DateYYPP       ,5
        ;   RpsFieldSubclass.DateYYYYPP     ,6
        ;   RpsFieldSubclass.TimeHHMMSS     ,7
        ;   RpsFieldSubclass.TimeHHMM       ,8
        ;   RpsFieldSubclass.Binary         ,9
        ;   RpsFieldSubclass.UserAlpha      ,10
        ;   RpsFieldSubclass.UserNumeric    ,11
        ;   RpsFieldSubclass.UserDate       ,12
        public property DataTypeSubclass, RpsFieldSubclass
            method get
                record 
                    tmp_SubClass, RpsFieldSubclass
                endrecord
            proc
                tmp_SubClass = RpsFieldSubclass.None
                using p_t_info.ti_type select
                (T_ALP),
                    using p_t_info.ti_class select
                    (C_BINARY),
                        tmp_SubClass = RpsFieldSubclass.None
                    endusing
                (T_DEC),
                begin
                    using p_t_info.ti_class select
                    (C_YYMMDD),
                        tmp_SubClass = RpsFieldSubclass.DateYYMMDD
                    (C_YYYYMMDD),
                        tmp_SubClass = RpsFieldSubclass.DateYYYYMMDD
                    (C_YYJJJ),
                        tmp_SubClass = RpsFieldSubclass.DateYYJJJ
                    (C_YYYYJJJ),
                        tmp_SubClass = RpsFieldSubclass.DateYYYYJJJ
                    (C_YYPP),
                        tmp_SubClass = RpsFieldSubclass.DateYYPP
                    (C_YYYYPP),
                        tmp_SubClass = RpsFieldSubclass.DateYYYYPP
                    (C_HHMMSS),
                        tmp_SubClass = RpsFieldSubclass.TimeHHMMSS
                    (C_BINARY),
                        tmp_SubClass = RpsFieldSubclass.TimeHHMM
                    endusing
                end
                (T_USR),
                begin
                    using p_t_info.ti_class select
                    (C_ALPHA),
                        tmp_SubClass = RpsFieldSubclass.UserAlpha
                    (C_NUMERIC),
                        tmp_SubClass = RpsFieldSubclass.UserNumeric
                    (C_DATE),
                        tmp_SubClass = RpsFieldSubclass.UserDate
                    endusing
                end
                endusing
                mreturn tmp_SubClass
            endmethod
        endproperty     
        
        ; User defined field type (a30)
        public property UserFieldType, a
            method get
            proc
                mreturn %atrim(p_UserFieldType)
            endmethod
        endproperty

        ; Field size (d5)
        public property Size, int
            method get
            proc
                mreturn p_t_info.ti_size
            endmethod
        endproperty

        ; Digits to right of decimal point (d2)
        public property Precision, int
            method get
            proc
                mreturn p_t_info.ti_prec
            endmethod
        endproperty

        ; Array dimensions ([4]d3)
        public property ArrayDimension, [#]int
            method get
            proc
                if (p_ArrayDimension==^null)
                begin
                    p_ArrayDimension = new int[4]
                    p_ArrayDimension[1] = p_t_info.ti_dim[1]
                    p_ArrayDimension[2] = p_t_info.ti_dim[2]
                    p_ArrayDimension[3] = p_t_info.ti_dim[3]
                    p_ArrayDimension[4] = p_t_info.ti_dim[4]
                end
            mreturn p_ArrayDimension
            endmethod
        endproperty
        
        ; Native data size (d5)
        public property NativeSize, int
            method get
            proc
                mreturn p_t_info.ti_ndsize
            endmethod
        endproperty

        ; Excluded by language (boolean)
        public property ExcludedByLanguage, boolean
            method get
            proc
                mreturn p_t_info.ti_dblvw
            endmethod
        endproperty

        ; Excluded by ReportWriter (boolean)
        public property ExcludedByReportWriter, boolean
            method get
            proc
                mreturn p_t_info.ti_rptvw
            endmethod
        endproperty

        ; Excluded by Toolkit (boolean)
        public property ExcludedByToolkit, boolean
            method get
            proc
                mreturn p_t_info.ti_scrptvw
            endmethod
        endproperty

        ; Excluded by Web? (boolean)
        public property ExcludedByWeb, boolean
            method get
            proc
                mreturn p_t_info.ti_webvw
            endmethod
        endproperty

        ; Field name is the name link (boolean)
        public property NoNameLink, boolean
            method get
            proc
                mreturn p_t_info.ti_nolnk
            endmethod
        endproperty

        ;Report heading (a40)
        public property ReportHeading, a
            method get
            proc
                mreturn %atrim(p_ReportHeading)
            endmethod
        endproperty

        ; Display format name (a30)
        public property FormatName, a
            method get
            proc
                mreturn %atrim(p_t_info.ti_fmt)
            endmethod
        endproperty

        ; Report field justification (enum RpsJustification)
        ;   RpsJustification.Left, 0
        ;   RpsJustification.Right, 1
        ;   RpsJustification.Center, 2
        public property ReportJustification, RpsJustification
            method get
            proc
                mreturn (RpsJustification)integer(p_t_info.ti_rptjust)
            endmethod
        endproperty

        ; Input field justification (enum RpsJustification)
        ;   RpsJustification.Left, 0
        ;   RpsJustification.Right, 1
        ;   RpsJustification.Center, 2
        public property InputJustification, RpsJustification
            method get
            proc
                mreturn (RpsJustification)integer(p_t_info.ti_inpjust)
            endmethod
        endproperty

        ; Input field position mode (enum RpsPositionMode)
        ;   RpsPositionMode.Absolute, 1
        ;   RpsPositionMode.Relative, 2
        public property FieldPositionMode, RpsPositionMode
            method get
            proc
                mreturn (RpsPositionMode)integer(p_t_info.ti_fpostyp)
            endmethod
        endproperty

        ; Input field row (d3)
        public property FieldRow, int
            method get
            proc
                mreturn p_t_info.ti_finprow
            endmethod
        endproperty

        ; Input field column (d3)
        public property FieldColumn, int
            method get
            proc
                mreturn p_t_info.ti_finpcol
            endmethod
        endproperty

        ; Prompt position type (enum RpsPositionMode)
        ;   RpsPositionMode.Absolute, 1
        ;   RpsPositionMode.Relative, 2
        public property PromptPositionMode, RpsPositionMode
            method get
            proc
                mreturn (RpsPositionMode)integer(p_t_info.ti_postyp)
            endmethod
        endproperty

        ; Prompt row (d3)
        public property PromptRow, int
            method get
            proc
                mreturn p_t_info.ti_inprow
            endmethod
        endproperty

        ; Prompt column (d3)
        public property PromptColumn, int
            method get
            proc
                mreturn p_t_info.ti_inpcol
            endmethod
        endproperty

        ; Blank if zero? (boolean)
        public property BlankIfZero, boolean
            method get
            proc
                mreturn p_t_info.ti_bzro
            endmethod
        endproperty

        ; Custom paint character specified (boolean)
        public property PaintCharacterSpecified, boolean
            method get
            proc
                mreturn p_t_info.ti_paint
            endmethod
        endproperty

        ; Custom paint character (a1)
        public property PaintCharacter, a
            method get
            proc
                mreturn p_t_info.ti_pntchr
            endmethod
        endproperty

        ; View field as (enum RpsFieldViewAs)
        ;   Field, 0
        ;   RadioButtons, 2
        ;   CheckBox ,3
        public property ViewAs, RpsFieldViewAs
            method get
            proc
                mreturn (RpsFieldViewAs)integer(p_t_info.ti_view)
            endmethod
        endproperty

        ; Color palette (enum RpsColorPalette)
        ;   Palette1, 1
        ;   Palette2, 2
        ;   Palette3, 3
        ;   Palette4, 4
        ;   Palette5, 5
        ;   Palette6, 6
        ;   Palette7, 7
        ;   Palette8, 8
        ;   Palette9, 9
        ;   Palette10, 10
        ;   Palette11, 11
        ;   Palette12, 12
        ;   Palette13, 13
        ;   Palette14, 14
        ;   Palette15, 15
        ;   Palette16, 16
        public property ColorPalette, RpsColorPalette
            method get
            proc
                mreturn (RpsColorPalette)integer(p_t_info.ti_color)
            endmethod
        endproperty

        ; Override the highlight attribute (boolean)
        public property RenditionHighlight, boolean
            method get
            proc
                mreturn (p_t_info.ti_attrib&&p_t_info.ti_highlight)
            endmethod
        endproperty

        ; Override the reverse attribute (boolean)
        public property RenditionReverse, boolean
            method get
            proc
                mreturn (p_t_info.ti_attrib&&p_t_info.ti_reverse)
            endmethod
        endproperty

        ; Override the blink attribute (boolea)
        public property RenditionBlink, boolean
            method get
            proc
                mreturn (p_t_info.ti_attrib&&p_t_info.ti_blink)
            endmethod
        endproperty

        ; Override the underline attribute (boolean)
        public property RenditionUnderline, boolean
            method get
            proc
                mreturn (p_t_info.ti_attrib&&p_t_info.ti_underline)
            endmethod
        endproperty

        ; Read-only (boolean)
        public property ReadOnly, boolean
            method get
            proc
                mreturn p_t_info.ti_readonly
            endmethod
        endproperty

        ; Disabled (boolean)
        public property Disabled, boolean
            method get
            proc
                mreturn p_t_info.ti_disabled
            endmethod
        endproperty

        ; Display length (d5)
        public property DisplayLength, int
            method get
            proc
                mreturn p_t_info.ti_displen
            endmethod
        endproperty

        ; View length (d5)
        public property ViewLength, int
            method get
            proc
                mreturn p_t_info.ti_viewlen
            endmethod
        endproperty

        ; Don't echo characters typed (boolean)
        public property NoEcho, boolean
            method get
            proc
                mreturn p_t_info.ti_noecho
            endmethod
        endproperty

        ; Echo character for characters typed (a1)
        ; (Only used if NoEcho = true)
        public property NoEchoCharacter, a
            method get
            proc
                mreturn p_t_info.ti_echochr
            endmethod
        endproperty

        ; Default action (enum RpsFieldDefaultAction)
        ;   None, 0
        ;   Default, 1
        ;   Copy, 2
        ;   Increment, 3
        ;   Decrement, 4
        public property DefaultAction, RpsFieldDefaultAction
            method get
            proc
                mreturn (RpsFieldDefaultAction)integer(p_t_info.ti_defact)
            endmethod
        endproperty
        
        ; Automatic default action? (boolean)
        public property DefaultAuotmatic, boolean
            method get
            proc
                mreturn p_t_info.ti_auto
            endmethod
        endproperty

        ; Default date to current date? (boolean)
        public property DateDefaultToday, boolean
            method get
            proc
                mreturn p_t_info.ti_today
            endmethod
        endproperty

        ; Allow short date? (boolean)
        public property AllowShortDate, boolean
            method get
            proc
                mreturn p_t_info.ti_short
            endmethod
        endproperty

        ; Default time to current time? (boolean)
        public property TimeDefaultNow, boolean
            method get
            proc
                mreturn p_t_info.ti_now
            endmethod
        endproperty

        ; Display meridian indicator? (boolean)
        public property TimeAmPm, boolean
            method get
            proc
                mreturn p_t_info.ti_ampm
            endmethod
        endproperty

        ; Input timeout mode (enum RpsFieldTimeout)
        ;   None, 0
        ;   Time, 1
        ;   Immediate, 2
        ;   Global, 3
        ;   Forever, 4
        public property InputTimeoutMode, RpsFieldTimeout
            method get
            proc
                mreturn (RpsFieldTimeout)integer(p_t_info.ti_wait)
            endmethod
        endproperty

        ; Input timeout delay (d5)
        ; (Only used if InputTimeoutMode = RpsFieldTimeout.Time)
        public property InputTimeout, int
            method get
            proc
                mreturn p_t_info.ti_waittime
            endmethod
        endproperty

        ; Convert input to uppercase (boolean)
        public property Uppercase, boolean
            method get
            proc
                mreturn p_t_info.ti_uc
            endmethod
        endproperty

        ; No decimal needs to be entered (boolean)
        public property NoDecimalRequired, boolean
            method get
            proc
                mreturn p_t_info.ti_nodec
            endmethod
        endproperty

        ; Field terminates automatically when filled (boolean)
        public property NoTerminatorRequired, boolean
            method get
            proc
                mreturn p_t_info.ti_noterm
            endmethod
        endproperty

        ; Cursor position is retained (boolean)
        public property RetainPosition, boolean
            method get
            proc
                mreturn p_t_info.ti_retpos
            endmethod
        endproperty

        ; Input length (d5)
        public property InputLength, int
            method get
            proc
                mreturn p_t_info.ti_inplen
            endmethod
        endproperty

        ; Required field (boolean)
        public property Required, boolean
            method get
            proc
                mreturn p_t_info.ti_req
            endmethod
        endproperty

        ; Break field? (enum RpsFieldBreak)
        ;   None, 0
        ;   Break, 1
        ;   Always, 2
        ;   OnReturn, 3
        public property BreakMode, RpsFieldBreak
            method get
            proc
                mreturn (RpsFieldBreak)integer(p_t_info.ti_break)
            endmethod
        endproperty

        ; Negative allowed (enum RpsFieldNegatives)
        ;   None ,0
        ;   Allowed ,1
        ;   Only, 2
        ;   OrZero, 3
        ; (Only used for numeric fields)
        public property NegativeAllowed, RpsFieldNegatives
            method get
            proc
                mreturn (RpsFieldNegatives)integer(p_t_info.ti_negalw)
            endmethod
        endproperty

        ; Allowed values list (@ArrayList)
        public property AllowList, @ArrayList
            method get
            proc
                mreturn p_AllowList
            endmethod
        endproperty

        ; Length of longest allow list entry (d3)
        public property AllowListMaxLength, int
            method get
            proc
                mreturn p_t_info.ti_alwlen
            endmethod
        endproperty

        ; Case sensitive matches for allow list values (boolean)
        public property AllowListMatchCase, boolean
            method get
            proc
                mreturn p_t_info.ti_matchcs
            endmethod
        endproperty

        ; Exact matches for allow list values (boolean)
        public property AllowListMatchExact, boolean
            method get
            proc
                mreturn p_t_info.ti_matchex
            endmethod
        endproperty

        ; Selection List (@ArrayList)
        public property SelectionList, @ArrayList
            method get
            proc
                mreturn p_SelectionList
            endmethod
        endproperty

        ; Length of longest selection list entry (d3)
        public property SelectionListMaxLength, int
            method get
            proc
                mreturn p_t_info.ti_sellen
            endmethod
        endproperty

        ; Current selection type (enum RpsFieldSelectionType)
        ;   Window, 1
        ;   List, 2
        public property SelectionListType, RpsFieldSelectionType
            method get
            proc
                mreturn (RpsFieldSelectionType)integer(p_t_info.ti_seltyp)
            endmethod
        endproperty

        ; Selection window row (d2)
        public property SelectionWindowRow, int
            method get
            proc
                mreturn p_t_info.ti_selrow
            endmethod
        endproperty

        ; Selection window column (d2)
        public property SelectionWindowColumn, int
            method get
            proc
                mreturn p_t_info.ti_selcol
            endmethod
        endproperty

        ; Selection window name (a15)
        ; (Only used if SelectionListType = RpsFieldSelectionType.Window)
        public property SelectionWindowName, a
            method get
            proc
                mreturn %atrim(p_t_info.ti_selwin)
            endmethod
        endproperty

        ; Selection window height (d2)
        ; (Only used if SelectionListType = RpsFieldSelectionType.List)
        public property SelectionWindowHeight, int
            method get
            proc
                mreturn p_t_info.ti_selht
            endmethod
        endproperty
        
        ; Field prompt
        public property Prompt, a
            method get
            proc
                mreturn %atrim(p_Prompt)
            endmethod
        endproperty
        
        ; Help identifier
        public property HelpIdentifier, a
            method get
            proc
                mreturn %atrim(p_HelpIdentifier)
            endmethod
        endproperty
        
        ; Information line text
        public property InfoLineText, a
            method get
            proc
                mreturn %atrim(p_InfoLineText)
            endmethod
        endproperty

        ;User text string
        public property UserText, a
            method get
            proc
                mreturn %atrim(p_UserText)
            endmethod
        endproperty
        
        ; Alternate name
        public property AlternateName, a
            method get
            proc
                mreturn %atrim(p_AlternateName)
            endmethod
        endproperty

        ; Field font palette name
        public property FieldFont, a
            method get
            proc
                mreturn %atrim(p_FieldFont)
            endmethod
        endproperty

        ; Prompt font palette name
        public property PromptFont, a
            method get
            proc
                mreturn %atrim(p_PromptFont)
            endmethod
        endproperty

        ; Default value
        public property DefaultValue, a
            method get
            proc
                mreturn %atrim(p_DefaultValue)
            endmethod
        endproperty
        
        ; Arrive method name (a30)
        public property ArriveMethod, a
            method get
            proc
                mreturn %atrim(p_ArriveMethod)
            endmethod
        endproperty

        ; Leave method name (a30)
        public property LeaveMethod, a
            method get
            proc
                mreturn %atrim(p_LeaveMethod)
            endmethod
        endproperty

        ; Drill method name (a30)
        public property DrillMethod, a
            method get
            proc
                mreturn %atrim(p_DrillMethod)
            endmethod
        endproperty

        ; Hyperlink method name (a30)
        public property HyperlinkMethod, a
            method get
            proc
                mreturn %atrim(p_HyperlinkMethod)
            endmethod
        endproperty

        ; Change method name (a30)
        public property ChangeMethod, a
            method get
            proc
                mreturn %atrim(p_ChangeMethod)
            endmethod
        endproperty

        ; Display method name (a30)
        public property DisplayMethod, a
            method get
            proc
                mreturn %atrim(p_DisplayMethod)
            endmethod
        endproperty

        ; Edit format method name (a30)
        public property EditFormatMethod, a
            method get
            proc
                mreturn %atrim(p_EditFormatMethod)
            endmethod
        endproperty
        
        ;Numeric range exists (d2)
        public property NumericRangeExists, i
            method get
            proc
                mreturn p_t_info.ti_range
            endmethod
        endproperty

        ;Numeric field range minimum (decimal)
        public property NumericRangeMinimum, decimal
            method get
            proc
                mreturn p_fti_range.fti_rgmin
            endmethod
        endproperty

        ;Numeric field range maximum (decimal)
        public property NumericRangeMaximum, decimal
            method get
            proc
                mreturn p_fti_range.fti_rgmax
            endmethod
        endproperty

        ;Enumerated (d2)
        public property Enumerated, int
            method get
            proc
                mreturn p_t_info.ti_enum
            endmethod
        endproperty

        ;Enumerated field display length (d2)
        public property EnumeratedDisplayLength, int
            method get
            proc
                mreturn p_fti_enum.fti_enmlen
            endmethod
        endproperty

        ;Enumerated field base value (d2)
        public property EnumeratedBaseValue, int
            method get
            proc
                mreturn p_fti_enum.fti_enmbase
            endmethod
        endproperty

        ;Enumerated field step value (d2)
        public property EnumeratedStepValue, int
            method get
            proc
                mreturn p_fti_enum.fti_enmstep
            endmethod
        endproperty

		; Coerced type (RpsFieldCorecedType)
		public property CorecedType, RpsFieldCorecedType
			method get
			proc
				mreturn p_CorecedType
			endmethod
			method set
			proc
				p_CorecedType = value
			endmethod
		endproperty

;ADD ti_flags        ,[15]i1   ; Template override flags ([15]i1 see .defines above)

    endclass
    
endnamespace

