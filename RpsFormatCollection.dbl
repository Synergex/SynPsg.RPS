;******************************************************************************
;
; Class:		SynPsg.Rps.RpsFormatCollection
;
; Description:	Represents a collection of Repository formats for a single
;				structure, or a collection of global structures, or pre-defined
;				date or time structures
;
; Author:		Steve Ives, Synergex Professional Services Group
;
; Date: 		19th October 2007
;
;******************************************************************************
;
; This code is supplied as seen and without warranty or support, and is used
; at your own risk. Neither the author or Synergex accept any responsability
; for any loss or damage which may result from the use of this code.
;
;******************************************************************************
;
; $Revision: 1 $
;
; $Date: 2010-04-13 17:06:56-07:00 $
;
;******************************************************************************
;
.define DDINFO_DEFINES_ONLY
.include "RPSLIB:ddinfo.def"
.undefine DDINFO_DEFINES_ONLY

import SynPsg.Rps
.ifdef DBLV915
import Synergex.SynergyDE.Collections
.else
import System.Collections
.endc

namespace SynPsg.Rps

	public class RpsFormatCollection
		
		private p_Collection, @ArrayList

		; Constructor for structure formats (default capacity)
		public method RpsFormatCollection
			required in StructureName, a
			endparams
		proc
			p_Collection = new ArrayList()
			Repository.CheckIsOpen()
			LoadFormats(StructureName)
		endmethod
		
		; Constructor for structure formats (specific capacity)
		public method RpsFormatCollection
			required in StructureName, a
			required in Capacity, int
			endparams
		proc
			p_Collection = new ArrayList(Capacity)
			Repository.CheckIsOpen()
			LoadFormats(StructureName)
		endmethod

		; Constructor for global or predefined formats (default capacity)
		public method RpsFormatCollection
			required in GlobalFormatType, RpsGlobalFormatType
			endparams
		proc
			p_Collection = new ArrayList()
			Repository.CheckIsOpen()
			LoadFormats(GlobalFormatType)
		endmethod

		; Constructor for global / predefined formats (specific capacity)
		public method RpsFormatCollection
			required in GlobalFormatType, RpsGlobalFormatType
			required in Capacity, int
			endparams
		proc
			p_Collection = new ArrayList(Capacity)
			Repository.CheckIsOpen()
			LoadFormats(GlobalFormatType)
		endmethod

		; Destructor
		method ~RpsFormatCollection
		proc
			clear p_Collection
		endmethod

		;----------------------------------------------------------------------
		; Private methods and properties

		; Load structure formats
		private method LoadFormats, void
			required in StructureName, a
			endparams
			record local_data
				MemHandle, int
				ix, int
			endrecord
		proc
			init local_data
			try 
			begin
				data p_s_info, s_info
				;Set the current structure?
				dd_struct(Repository.RpsControl,DDS_INFO,StructureName,p_s_info)
				if (Repository.RpsControl.error)
					throw new RpsFormatException("Failed to get information for repository structure "+StructureName)
				;Do we have any formats to load?
				if (p_s_info.si_nmfmts) 
				begin
					;Size the format names array and get the format names
					MemHandle = %mem_proc(DM_ALLOC,^size(strIdentifier)*p_s_info.si_nmfmts)
					dd_format(Repository.RpsControl,DDM_LIST,p_s_info.si_nmfmts,^m(strIdentifier[1],MemHandle))
					if (Repository.RpsControl.error)
						throw new RpsFormatException("Failed to get formats for repository structure "+StructureName)
					;Add format names to the collection
					for ix from 1 thru p_s_info.si_nmfmts
						p_Collection.Add(new RpsFormat(StructureName,^m(strIdentifier[ix],MemHandle)))
				end
			end
			finally
			begin
				;Free format names array
				if (MemHandle) 
                    MemHandle = %mem_proc(DM_FREE,MemHandle)
			end
			endtry


		endmethod
		
		; Load global or predefined formats
		private method LoadFormats, void
			required in GlobalFormatType, RpsGlobalFormatType
			endparams
			record local_data
				MemHandle, int
				FormatCount, int
				ix, int
			endrecord
		proc
			init local_data
			try 
			begin
				;Get the global format count
				dd_name(Repository.RpsControl,DDN_COUNT,GlobalFormatType,FormatCount)
				if (Repository.RpsControl.error)
					throw new RpsFormatException("Failed to get repository global format count")
				;Do we have any formats to load?
				if (FormatCount) 
				begin
					;Size the format names array and get the format names
					MemHandle = %mem_proc(DM_ALLOC,^size(strIdentifier)*FormatCount)
					dd_name(Repository.RpsControl,DDN_LIST,GlobalFormatType,FormatCount,^m(strIdentifier[1],MemHandle))
					if (Repository.RpsControl.error)
						throw new RpsFormatException("Failed to get repository global format names")
					;Add formats to collection
					for ix from 1 thru FormatCount
					begin
						p_Collection.Add(new RpsFormat(^m(strIdentifier[ix],MemHandle)))
					end
				end
			end
			finally
			begin
				;Free format names array
				if (MemHandle) 
                    MemHandle = %mem_proc(DM_FREE,MemHandle)
			end
			endtry

		endmethod

		;-----------------------------------------------------------------------
		;The follwoing members make the collection look just like an ArrayList
		
		;Gets or sets the number of elements that the collection can contain.
		public property Capacity, int
			method get
			proc
				mreturn p_Collection.Capacity
			endmethod
			method set
			proc
				p_Collection.Capacity = value
			endmethod
		endproperty

		;Gets the number of elements actually contained in the collection.
		public property Count, int
			method get
			proc
				mreturn p_Collection.Count
			endmethod
		endproperty

		;Gets or sets the element at the specified index.
		public property Indexer, @RpsFormat
			required in Index, int
			method get
			proc
				mreturn (RpsFormat)p_Collection[Index]
			endmethod
			method set
			proc
				p_Collection[Index] = value
			endmethod
		endproperty

		;Adds an element to the end of the collection. 
		public method Add, int
			required in RpsFormat, @RpsFormat
			endparams
		proc
			mreturn p_Collection.Add(RpsFormat)
		endmethod

		;Removes the element at the specified index of the collection.
		public method RemoveAt, void
			required in Index, int
		proc
			p_Collection.RemoveAt(Index)
		endmethod

		;Searches for the specified element and returns the one-based index
		;of the first occurrence within the entire collection.
		public method IndexOf, int
			required in RpsFormat, @RpsFormat
		proc
			mreturn p_Collection.IndexOf(RpsFormat)
		endmethod

		;Searches for the specified element and returns the one-based index
		;of the first occurrence within the range of elements in the collection
		;that extends from the specified index to the last element.
		public method IndexOf, int
			required in RpsFormat, @RpsFormat
			required in StartIndex, int
		proc
			mreturn p_Collection.IndexOf(RpsFormat,StartIndex)
		endmethod

		;Searches for the specified element and returns the one-based index
		;of the first occurrence within the range of elements in the collection
		;that starts at the specified index and contains the specified number of
		;elements. 
		public method IndexOf, int
			required in RpsFormat, @RpsFormat
			required in StartIndex, int
			required in Count, int
		proc
			mreturn p_Collection.IndexOf(RpsFormat,StartIndex,Count)
		endmethod

		;Removes all elements from the collection.
		public method Clear, void
		proc
			p_Collection.Clear()
		endmethod

		;Inserts an element into the collection at the specified index.
		public method Insert, void
			required in AtIndex, int
			required in RpsFormat, @RpsFormat
			endparams
		proc
			p_Collection.Insert(AtIndex,RpsFormat)
		endmethod

		;Searches for the specified object and returns the one-based index of
		;the last occurrence within the entire collection. 
		public method LastIndexOf, int
			required in RpsFormat, @RpsFormat
		proc
			mreturn p_Collection.LastIndexOf(RpsFormat)
		endmethod

		;Searches for the specified object and returns the one-based index of
		;the last occurrence within the range of elements in the collection that
		;extends from the first element to the specified index.
		public method LastIndexOf, int
			required in RpsFormat, @RpsFormat
			required in StartIndex, int
		proc
			mreturn p_Collection.LastIndexOf(RpsFormat,StartIndex)
		endmethod

		;Searches for the specified object and returns the one-based index of
		;the last occurrence within the range of elements in the collection that
		;contains the specified number of elements and ends at the specified index. 
		public method LastIndexOf, int
			required in RpsFormat, @RpsFormat
			required in StartIndex, int
			required in Count, int
		proc
			mreturn p_Collection.LastIndexOf(RpsFormat,StartIndex,Count)
		endmethod

	endclass

endnamespace
